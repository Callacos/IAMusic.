@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    profile = get_spotify_profile()
    if profile:
        display_name = profile.get('display_name', 'Inconnu')
        spotify_id = profile.get('id', 'Inconnu')
        product = profile.get('product', 'inconnu')

        print("üéß Utilisateur Spotify :", display_name, "-", spotify_id, "-", product)
    else:
        print("‚ö†Ô∏è Aucun profil Spotify connect√© ou token invalide.")
        display_name = "Utilisateur"
# üîΩ Charger artiste_semaine.json dynamiquement
    artiste_path = os.path.join(os.path.dirname(__file__), "artiste_semaine.json")
    try:
        with open(artiste_path, "r") as f:
            artiste = json.load(f)
    except Exception as e:
        print("‚ö†Ô∏è Impossible de charger artiste_semaine.json :", e)
        artiste = None

    playback_info = get_current_playback_info()
    return render_template('index.html', display_name=display_name, artiste=artiste, playback_info=playback_info)













# Configuration pour l'authentification avec les scopes n√©cessaires
sp = Spotify(auth_manager=SpotifyOAuth(
    client_id=os.getenv("SPOTIPY_CLIENT_ID"),
    client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
    redirect_uri="http://localhost:8888/callback",
    scope="user-library-read user-read-playback-state user-modify-playback-state streaming",
    show_dialog=False,
     open_browser=False
))
print("Connexion √† Spotify r√©ussie")




















@app.route('/callback')
def callback():
    nom = session.get('user_id')
    if not nom:
        return redirect(url_for('login'))

    # On cr√©e l'objet OAuth li√© √† ce nom
    sp_oauth = get_spotify_oauth_for_user(nom)

    # R√©cup√©ration du code renvoy√© par Spotify
    code = request.args.get('code')
    token_info = sp_oauth.get_access_token(code, as_dict=True)

    # üíæ Enregistrement des tokens en base de donn√©es
    from utils import save_spotify_tokens  # ajuste le chemin selon ton organisation
    save_spotify_tokens(nom, token_info)

    # Connexion √† Spotify avec le token
    sp = spotipy.Spotify(auth=token_info['access_token'])

    # R√©cup√©ration du profil utilisateur
    profile = sp.current_user()
    print("üß™ PROFIL COMPLET RENVOY√â PAR SPOTIFY :", profile)

    display_name = profile.get('display_name', 'Inconnu')
    spotify_id = profile.get('id', 'Inconnu')
    product = profile.get('product', 'inconnu')

    print("üéß Spotify connect√© :", display_name, "-", spotify_id, "-", product)

    # Si ce n'est pas un compte premium ‚Üí on bloque
    if product != 'premium':
        print("‚ùå COMPTE GRATUIT BLOQU√â :", spotify_id)
        return render_template(
            "spotify_error.html",
            message="Ce compte Spotify n'est pas Premium. IAMusic n√©cessite un compte Premium pour fonctionner."
        )

    # Stockage du type dans session (facultatif mais utile pour ton app)
    session['spotify_type'] = product
    session['spotify_display_name'] = display_name

    return redirect(url_for('preferences'))

@app.route('/spotify-login')
def spotify_login():
    nom = session.get('user_id')
    if not nom:
        return redirect(url_for('login'))

    # üîÑ Supprime tous les fichiers .cache-* (m√™me celui du user actuel)
    for f in os.listdir():
        if f.startswith(".cache"):
            os.remove(f)

    # üîê Cr√©e une nouvelle instance OAuth propre pour ce user
    sp_oauth = get_spotify_oauth_for_user(nom)
    auth_url = sp_oauth.get_authorize_url()

    # üöÄ Redirige vers l'authentification Spotify
    return redirect(auth_url)